
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  email: 'email',
  phone: 'phone',
  role: 'role',
  emergencyContact: 'emergencyContact'
};

exports.Prisma.PasswordCredentialScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  universityId: 'universityId',
  studentId: 'studentId',
  qrToken: 'qrToken',
  fullName: 'fullName',
  bloodType: 'bloodType',
  idNumber: 'idNumber',
  university: 'university',
  emergencyName: 'emergencyName',
  emergencyContact: 'emergencyContact'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  polygon: 'polygon',
  serviceHours: 'serviceHours'
};

exports.Prisma.StopScalarFieldEnum = {
  id: 'id',
  zoneId: 'zoneId',
  name: 'name',
  lat: 'lat',
  lng: 'lng',
  isSafe: 'isSafe',
  activeHours: 'activeHours'
};

exports.Prisma.TimeslotScalarFieldEnum = {
  id: 'id',
  zoneId: 'zoneId',
  startAt: 'startAt',
  endAt: 'endAt',
  capacity: 'capacity'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  plate: 'plate',
  capacity: 'capacity',
  telemetryProvider: 'telemetryProvider'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  timeslotId: 'timeslotId',
  vehicleId: 'vehicleId',
  pathPolyline: 'pathPolyline',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.TrackingPointScalarFieldEnum = {
  id: 'id',
  tripId: 'tripId',
  ts: 'ts',
  lat: 'lat',
  lng: 'lng',
  speed: 'speed',
  heading: 'heading'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timeslotId: 'timeslotId',
  stopId: 'stopId',
  tripId: 'tripId',
  status: 'status',
  etaMinutes: 'etaMinutes',
  createdAt: 'createdAt',
  offlineToken: 'offlineToken',
  routeId: 'routeId'
};

exports.Prisma.FarePolicyScalarFieldEnum = {
  id: 'id',
  type: 'type',
  priceMinorUnits: 'priceMinorUnits',
  currency: 'currency'
};

exports.Prisma.BestFareLedgerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  spendUnit: 'spendUnit',
  spendDay: 'spendDay',
  spendWeek: 'spendWeek',
  adjustments: 'adjustments'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amountMinorUnits: 'amountMinorUnits',
  currency: 'currency',
  method: 'method',
  status: 'status',
  externalRef: 'externalRef',
  createdAt: 'createdAt'
};

exports.Prisma.SOSIncidentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reservationId: 'reservationId',
  tripId: 'tripId',
  triggeredAt: 'triggeredAt',
  resolvedAt: 'resolvedAt',
  status: 'status',
  lat: 'lat',
  lng: 'lng',
  notes: 'notes'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tripId: 'tripId',
  stars: 'stars',
  comment: 'comment',
  tags: 'tags'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  channel: 'channel',
  template: 'template',
  payload: 'payload',
  sentAt: 'sentAt',
  status: 'status'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  mainStops: 'mainStops',
  status: 'status',
  capacity: 'capacity',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  MONITOR: 'MONITOR',
  OPS: 'OPS',
  DRIVER: 'DRIVER',
  ADMIN: 'ADMIN'
};

exports.ReservationStatus = exports.$Enums.ReservationStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  BOARDED: 'BOARDED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  NO_SHOW: 'NO_SHOW'
};

exports.FareType = exports.$Enums.FareType = {
  UNIT: 'UNIT',
  DAY: 'DAY',
  WEEK: 'WEEK'
};

exports.RouteStatus = exports.$Enums.RouteStatus = {
  ACTIVE: 'ACTIVE',
  SAFE: 'SAFE',
  INCIDENT: 'INCIDENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  PasswordCredential: 'PasswordCredential',
  StudentProfile: 'StudentProfile',
  Zone: 'Zone',
  Stop: 'Stop',
  Timeslot: 'Timeslot',
  Vehicle: 'Vehicle',
  Trip: 'Trip',
  TrackingPoint: 'TrackingPoint',
  Reservation: 'Reservation',
  FarePolicy: 'FarePolicy',
  BestFareLedger: 'BestFareLedger',
  Payment: 'Payment',
  SOSIncident: 'SOSIncident',
  Rating: 'Rating',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  Route: 'Route'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
